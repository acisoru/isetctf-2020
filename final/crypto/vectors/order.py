from random import randint, sample

flag = "iset{A_p@rtially_0rdered_s3t_can_be_a_b0unded_l@ttice}"

alph = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_{}(),.:;!?@#$-+*/="
alph_dict = {'!': '2122', '#': '2202', '$': '2210', ')': '2110', '(': '2102', '+': '2212', '*': '2220', '-': '2211', ',': '2111', '/': '2221', '.': '2112', '1': '1222', '0': '1221', '3': '2001', '2': '2000', '5': '2010', '4': '2002', '7': '2012', '6': '2011', '9': '2021', '8': '2020', ';': '2121', ':': '2120', '=': '2222', '?': '2200', 'A': '0000', '@': '2201', 'C': '0002', 'B': '0001', 'E': '0011', 'D': '0010', 'G': '0020', 'F': '0012', 'I': '0022', 'H': '0021', 'K': '0101', 'J': '0100', 'M': '0110', 'L': '0102', 'O': '0112', 'N': '0111', 'Q': '0121', 'P': '0120', 'S': '0200', 'R': '0122', 'U': '0202', 'T': '0201', 'W': '0211', 'V': '0210', 'Y': '0220', 'X': '0212', 'Z': '0221', '_': '2022', 'a': '0222', 'c': '1001', 'b': '1000', 'e': '1010', 'd': '1002', 'g': '1012', 'f': '1011', 'i': '1021', 'h': '1020', 'k': '1100', 'j': '1022', 'm': '1102', 'l': '1101', 'o': '1111', 'n': '1110', 'q': '1120', 'p': '1112', 's': '1122', 'r': '1121', 'u': '1201', 't': '1200', 'w': '1210', 'v': '1202', 'y': '1212', 'x': '1211', '{': '2100', 'z': '1220', '}': '2101'}




def encode_letter(l):
    i = alph.index(l)
    t = ""
    for j in range(3, -1, -1):
        t += str(i // pow(3, j))
        i = i % pow(3, j)
    return t

def decode_letter(c):
    n = 0
    for i in range(4):
        n += int(c[i]) * pow(3, 3 - i)
    return alph[n]


alph_dict = {}
for let in alph:
    alph_dict[let] = encode_letter(let)

print alph_dict

def vect_comp(v1, v2):
    m1 = False
    m2 = False
    for i in range(len(v1)):
        if v1[i] < v2[i]:
            m2 = True
        if v1[i] > v2[i]:
            m1 = True
    if m1:
        if m2:
            return "0"
        else:
            return "1"
    else:
        if m2:
            return "2"
        else:
            return False

def gen(gamma, stages):
    iv = [i for i in stages[-1]]
    zeroes = [0, 3, 5, 6, 7, 9, 13, 14, 15]
    ones   = [1, 2, 4, 8, 10, 11, 12]

    for i, g in enumerate(gamma):
        print(gamma[i:])
        if g == "0":
            iz = randint(1, len(zeroes)//2)
            io = randint(1, len(ones)//2)
            z_ = sample(zeroes, iz)
            o_ = sample(ones, io)

            for z in z_:
                iv[z] = "1"
                zeroes.remove(z)
            for o in o_:
                iv[o] = "0"
                ones.remove(o)
            zeroes += o_
            ones += z_

        elif g == "1":
            io = randint(1, len(ones) // 2)
            o_ = sample(ones, io)

            for o in o_:
                iv[o] = "0"
                ones.remove(o)
            zeroes += o_

        elif g == "2":
            iz = randint(1, len(zeroes) // 2)
            z_ = sample(zeroes, iz)

            for z in z_:
                iv[z] = "1"
                zeroes.remove(z)

            ones += z_
        stages.append("".join(iv))
        print("".join(iv))
        print(stages)

    return stages



flag_enc = ""
for l in flag:
    flag_enc += encode_letter(l)

print flag_enc

flag_enc = "10211122101012002100000020221112220111211200102102" \
           "22110111011212202212211121100210101121101010022022" \
           "11222001120020221001022211102022100010102022022220" \
           "22100012211201111010021010100220221101220112001200" \
           "1021100110102101"


stages = ['0110100010111000', '0110000000101000', '0010000100100000', '1110011101100100', '0010011101100100',
          '0000011101100000', '0000011001100000', '0100011001100000', '0111011001101010', '0110011000001000',
          '0010111001101100', '0010110001100100', '1011010000100000', '0010010000100000', '0110011010100001',
          '0010110000110011', '1100010001111001', '1100011101111011', '1100010101111000', '1001010100101010',
          '1101010101100111', '1111000110100111', '1111100000101110', '1001000100101110', '1011000000101110',
          '1011000000101111', '1000011101101111', '1001011101101111', '1001111111101111', '0001011100001110',
          '0001001100001110', '0000000100001100', '0000001100001110', '1100111100001110', '1100111101011110',
          '1110100101011110', '1110100001010110', '1010100001000000', '0000100001000000', '0010110101100100',
          '0000010101000100', '0000010001000000', '1001110101110100', '0001110000111000', '1100110000111110',
          '0100100000111110', '0000101000110110', '0000111000111110', '0000011000100110', '0001010010111010',
          '0001010010111011', '1101110010111111', '1101110110111111', '1001110110111111', '1001100110111111',
          '1110100110111011', '1110100110011011', '0010000110001010', '0000000010001010', '0001001001001010',
          '0001001001001000', '0000001001001000', '1010001001101010', '1010000001000010', '1010110001001010',
          '1110110001001011', '1011010001011111', '1111011001011111', '1111011111011111', '0100001110001011',
          '1100001110111011', '1110011110111111', '1100011110111001', '1100011110010000', '0000011010010000',
          '0001011010111000', '0001011010110000', '0001011010010000', '0001101011110000', '0101100011111010',
          '0101101011111011', '0100100011010011', '0100110010000010', '0100100010000010', '0101010010000110',
          '0101010000000010', '0001000000000010', '0001101110000110', '0000101110000110', '0000101100000000',
          '1100110110000010', '1000010110000010', '1000000110010010', '1000000110000010', '0100010110010111',
          '0110011110000011', '1111111110000111', '1111111111000111', '0011101111001111', '1011101111101111',
          '1111101111101111', '0101000010101101', '0100000010000101', '0110101010000111', '0110111111100111',
          '1111111111100111', '1100111111101111', '1100111101111111', '0100101000101011', '0000101000101011',
          '0011101101101011', '0011101100010101', '0001001111000111', '1011101111001111', '1101011001000011',
          '1111011101100111', '1111111101110111', '1111011101110111', '1111011101111011', '1111011111101011',
          '1111001010100011', '1010001000101111', '1010111101101111', '1111111101101111', '1111111111101111',
          '1111110101101111', '1011110100000110', '0010010100000110', '1001010110000010', '1111010110001010',
          '1111010110001100', '1111010110101101', '1111010110111101', '1110010110111101', '1110101100111101',
          '0000000101111101', '0101010011101101', '0100000011001001', '1100011001001100', '1100011001001000',
          '1101011010101101', '1111011110101101', '1111111010101101', '1111111010111111', '1111111011111111',
          '0100101101001101', '0110101101011101', '0111101101011101', '1111101101011101', '1111111101111111',
          '1001001110000110', '1001001110000111', '1101001110000111', '0001000110000111', '1001000100000110',
          '1000100110000111', '1000111100001101', '1000101100001100', '1000111101001100', '1000111111111100',
          '0000111000111000', '0000011000011000', '1001011011111100', '0101111111111100', '0101110001101100',
          '0100010000001100', '0100010000001000', '0000010000001000', '0000100010001000', '0000100000001000',
          '1000101000000001', '0110111000000100', '0111111010101110', '0101101010101000', '0001110010101001',
          '0001100010101000', '1101100001101011', '0000100000101011', '0000000001001011', '1001100001000010',
          '1001100001011010', '1001100001111011', '0011101001010101', '0011111011011101', '1011111011011101',
          '1010111011011101', '1000101010011001', '1001101000010000', '1000101000000000', '1110101000010111',
          '1110111000010111', '1110111010011101', '1000111010011101', '1000011000010001', '1000011000011001',
          '1010010000111110', '1110001101010010', '1110001001010000', '1111001001010000', '1001001001000010',
          '1011101100000011', '0010001100000010', '0011000100100111', '0011001101100111', '0010001000100101',
          '0010001000000101', '0000101000000110', '0001001010000110', '0001001000000110', '0001000000000110',
          '0000000010000110', '0000000010000010', '0001100111000000', '1001100111000000', '0001100111000000',
          '0000100111001001', '0000000010001001']



flag_enc_ = ""

for i in range(1, len(stages)):
    #print i, stages[i - 1], stages[i], vect_comp(stages[i - 1], stages[i])
    flag_enc_ += vect_comp(stages[i - 1], stages[i])


flag_ = ""
for i in range(0, len(flag_enc_), 4):
    flag_ += decode_letter(flag_enc_[i: i + 4])
print flag_





